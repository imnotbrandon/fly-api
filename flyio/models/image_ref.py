# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyio.configuration import Configuration


class ImageRef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'digest': 'str',
        'labels': 'dict(str, str)',
        'registry': 'str',
        'repository': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'digest': 'digest',
        'labels': 'labels',
        'registry': 'registry',
        'repository': 'repository',
        'tag': 'tag'
    }

    def __init__(self, digest=None, labels=None, registry=None, repository=None, tag=None, _configuration=None):  # noqa: E501
        """ImageRef - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._digest = None
        self._labels = None
        self._registry = None
        self._repository = None
        self._tag = None
        self.discriminator = None

        if digest is not None:
            self.digest = digest
        if labels is not None:
            self.labels = labels
        if registry is not None:
            self.registry = registry
        if repository is not None:
            self.repository = repository
        if tag is not None:
            self.tag = tag

    @property
    def digest(self):
        """Gets the digest of this ImageRef.  # noqa: E501


        :return: The digest of this ImageRef.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this ImageRef.


        :param digest: The digest of this ImageRef.  # noqa: E501
        :type: str
        """

        self._digest = digest

    @property
    def labels(self):
        """Gets the labels of this ImageRef.  # noqa: E501


        :return: The labels of this ImageRef.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ImageRef.


        :param labels: The labels of this ImageRef.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def registry(self):
        """Gets the registry of this ImageRef.  # noqa: E501


        :return: The registry of this ImageRef.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this ImageRef.


        :param registry: The registry of this ImageRef.  # noqa: E501
        :type: str
        """

        self._registry = registry

    @property
    def repository(self):
        """Gets the repository of this ImageRef.  # noqa: E501


        :return: The repository of this ImageRef.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this ImageRef.


        :param repository: The repository of this ImageRef.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def tag(self):
        """Gets the tag of this ImageRef.  # noqa: E501


        :return: The tag of this ImageRef.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ImageRef.


        :param tag: The tag of this ImageRef.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageRef):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageRef):
            return True

        return self.to_dict() != other.to_dict()
