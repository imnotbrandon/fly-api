# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyio.configuration import Configuration


class Machine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'checks': 'list[CheckStatus]',
        'config': 'ApiMachineConfig',
        'created_at': 'str',
        'events': 'list[MachineEvent]',
        'id': 'str',
        'image_ref': 'ImageRef',
        'instance_id': 'str',
        'name': 'str',
        'nonce': 'str',
        'private_ip': 'str',
        'region': 'str',
        'state': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'checks': 'checks',
        'config': 'config',
        'created_at': 'created_at',
        'events': 'events',
        'id': 'id',
        'image_ref': 'image_ref',
        'instance_id': 'instance_id',
        'name': 'name',
        'nonce': 'nonce',
        'private_ip': 'private_ip',
        'region': 'region',
        'state': 'state',
        'updated_at': 'updated_at'
    }

    def __init__(self, checks=None, config=None, created_at=None, events=None, id=None, image_ref=None, instance_id=None, name=None, nonce=None, private_ip=None, region=None, state=None, updated_at=None, _configuration=None):  # noqa: E501
        """Machine - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._checks = None
        self._config = None
        self._created_at = None
        self._events = None
        self._id = None
        self._image_ref = None
        self._instance_id = None
        self._name = None
        self._nonce = None
        self._private_ip = None
        self._region = None
        self._state = None
        self._updated_at = None
        self.discriminator = None

        if checks is not None:
            self.checks = checks
        if config is not None:
            self.config = config
        if created_at is not None:
            self.created_at = created_at
        if events is not None:
            self.events = events
        if id is not None:
            self.id = id
        if image_ref is not None:
            self.image_ref = image_ref
        if instance_id is not None:
            self.instance_id = instance_id
        if name is not None:
            self.name = name
        if nonce is not None:
            self.nonce = nonce
        if private_ip is not None:
            self.private_ip = private_ip
        if region is not None:
            self.region = region
        if state is not None:
            self.state = state
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def checks(self):
        """Gets the checks of this Machine.  # noqa: E501


        :return: The checks of this Machine.  # noqa: E501
        :rtype: list[CheckStatus]
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this Machine.


        :param checks: The checks of this Machine.  # noqa: E501
        :type: list[CheckStatus]
        """

        self._checks = checks

    @property
    def config(self):
        """Gets the config of this Machine.  # noqa: E501


        :return: The config of this Machine.  # noqa: E501
        :rtype: ApiMachineConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Machine.


        :param config: The config of this Machine.  # noqa: E501
        :type: ApiMachineConfig
        """

        self._config = config

    @property
    def created_at(self):
        """Gets the created_at of this Machine.  # noqa: E501


        :return: The created_at of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Machine.


        :param created_at: The created_at of this Machine.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def events(self):
        """Gets the events of this Machine.  # noqa: E501


        :return: The events of this Machine.  # noqa: E501
        :rtype: list[MachineEvent]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Machine.


        :param events: The events of this Machine.  # noqa: E501
        :type: list[MachineEvent]
        """

        self._events = events

    @property
    def id(self):
        """Gets the id of this Machine.  # noqa: E501


        :return: The id of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Machine.


        :param id: The id of this Machine.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_ref(self):
        """Gets the image_ref of this Machine.  # noqa: E501


        :return: The image_ref of this Machine.  # noqa: E501
        :rtype: ImageRef
        """
        return self._image_ref

    @image_ref.setter
    def image_ref(self, image_ref):
        """Sets the image_ref of this Machine.


        :param image_ref: The image_ref of this Machine.  # noqa: E501
        :type: ImageRef
        """

        self._image_ref = image_ref

    @property
    def instance_id(self):
        """Gets the instance_id of this Machine.  # noqa: E501

        InstanceID is unique for each version of the machine  # noqa: E501

        :return: The instance_id of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Machine.

        InstanceID is unique for each version of the machine  # noqa: E501

        :param instance_id: The instance_id of this Machine.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def name(self):
        """Gets the name of this Machine.  # noqa: E501


        :return: The name of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Machine.


        :param name: The name of this Machine.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nonce(self):
        """Gets the nonce of this Machine.  # noqa: E501

        Nonce is only every returned on machine creation if a lease_duration was provided.  # noqa: E501

        :return: The nonce of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this Machine.

        Nonce is only every returned on machine creation if a lease_duration was provided.  # noqa: E501

        :param nonce: The nonce of this Machine.  # noqa: E501
        :type: str
        """

        self._nonce = nonce

    @property
    def private_ip(self):
        """Gets the private_ip of this Machine.  # noqa: E501

        PrivateIP is the internal 6PN address of the machine.  # noqa: E501

        :return: The private_ip of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this Machine.

        PrivateIP is the internal 6PN address of the machine.  # noqa: E501

        :param private_ip: The private_ip of this Machine.  # noqa: E501
        :type: str
        """

        self._private_ip = private_ip

    @property
    def region(self):
        """Gets the region of this Machine.  # noqa: E501


        :return: The region of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Machine.


        :param region: The region of this Machine.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def state(self):
        """Gets the state of this Machine.  # noqa: E501


        :return: The state of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Machine.


        :param state: The state of this Machine.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this Machine.  # noqa: E501


        :return: The updated_at of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Machine.


        :param updated_at: The updated_at of this Machine.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Machine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Machine):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Machine):
            return True

        return self.to_dict() != other.to_dict()
