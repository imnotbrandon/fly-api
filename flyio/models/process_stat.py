# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyio.configuration import Configuration


class ProcessStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'command': 'str',
        'cpu': 'int',
        'directory': 'str',
        'listen_sockets': 'list[ListenSocket]',
        'pid': 'int',
        'rss': 'int',
        'rtime': 'int',
        'stime': 'int'
    }

    attribute_map = {
        'command': 'command',
        'cpu': 'cpu',
        'directory': 'directory',
        'listen_sockets': 'listen_sockets',
        'pid': 'pid',
        'rss': 'rss',
        'rtime': 'rtime',
        'stime': 'stime'
    }

    def __init__(self, command=None, cpu=None, directory=None, listen_sockets=None, pid=None, rss=None, rtime=None, stime=None, _configuration=None):  # noqa: E501
        """ProcessStat - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._command = None
        self._cpu = None
        self._directory = None
        self._listen_sockets = None
        self._pid = None
        self._rss = None
        self._rtime = None
        self._stime = None
        self.discriminator = None

        if command is not None:
            self.command = command
        if cpu is not None:
            self.cpu = cpu
        if directory is not None:
            self.directory = directory
        if listen_sockets is not None:
            self.listen_sockets = listen_sockets
        if pid is not None:
            self.pid = pid
        if rss is not None:
            self.rss = rss
        if rtime is not None:
            self.rtime = rtime
        if stime is not None:
            self.stime = stime

    @property
    def command(self):
        """Gets the command of this ProcessStat.  # noqa: E501


        :return: The command of this ProcessStat.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ProcessStat.


        :param command: The command of this ProcessStat.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def cpu(self):
        """Gets the cpu of this ProcessStat.  # noqa: E501


        :return: The cpu of this ProcessStat.  # noqa: E501
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this ProcessStat.


        :param cpu: The cpu of this ProcessStat.  # noqa: E501
        :type: int
        """

        self._cpu = cpu

    @property
    def directory(self):
        """Gets the directory of this ProcessStat.  # noqa: E501


        :return: The directory of this ProcessStat.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this ProcessStat.


        :param directory: The directory of this ProcessStat.  # noqa: E501
        :type: str
        """

        self._directory = directory

    @property
    def listen_sockets(self):
        """Gets the listen_sockets of this ProcessStat.  # noqa: E501


        :return: The listen_sockets of this ProcessStat.  # noqa: E501
        :rtype: list[ListenSocket]
        """
        return self._listen_sockets

    @listen_sockets.setter
    def listen_sockets(self, listen_sockets):
        """Sets the listen_sockets of this ProcessStat.


        :param listen_sockets: The listen_sockets of this ProcessStat.  # noqa: E501
        :type: list[ListenSocket]
        """

        self._listen_sockets = listen_sockets

    @property
    def pid(self):
        """Gets the pid of this ProcessStat.  # noqa: E501


        :return: The pid of this ProcessStat.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this ProcessStat.


        :param pid: The pid of this ProcessStat.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def rss(self):
        """Gets the rss of this ProcessStat.  # noqa: E501


        :return: The rss of this ProcessStat.  # noqa: E501
        :rtype: int
        """
        return self._rss

    @rss.setter
    def rss(self, rss):
        """Sets the rss of this ProcessStat.


        :param rss: The rss of this ProcessStat.  # noqa: E501
        :type: int
        """

        self._rss = rss

    @property
    def rtime(self):
        """Gets the rtime of this ProcessStat.  # noqa: E501


        :return: The rtime of this ProcessStat.  # noqa: E501
        :rtype: int
        """
        return self._rtime

    @rtime.setter
    def rtime(self, rtime):
        """Sets the rtime of this ProcessStat.


        :param rtime: The rtime of this ProcessStat.  # noqa: E501
        :type: int
        """

        self._rtime = rtime

    @property
    def stime(self):
        """Gets the stime of this ProcessStat.  # noqa: E501


        :return: The stime of this ProcessStat.  # noqa: E501
        :rtype: int
        """
        return self._stime

    @stime.setter
    def stime(self, stime):
        """Sets the stime of this ProcessStat.


        :param stime: The stime of this ProcessStat.  # noqa: E501
        :type: int
        """

        self._stime = stime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessStat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessStat):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProcessStat):
            return True

        return self.to_dict() != other.to_dict()
