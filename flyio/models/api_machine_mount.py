# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyio.configuration import Configuration


class ApiMachineMount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_size_gb': 'int',
        'encrypted': 'bool',
        'extend_threshold_percent': 'int',
        'name': 'str',
        'path': 'str',
        'size_gb': 'int',
        'size_gb_limit': 'int',
        'volume': 'str'
    }

    attribute_map = {
        'add_size_gb': 'add_size_gb',
        'encrypted': 'encrypted',
        'extend_threshold_percent': 'extend_threshold_percent',
        'name': 'name',
        'path': 'path',
        'size_gb': 'size_gb',
        'size_gb_limit': 'size_gb_limit',
        'volume': 'volume'
    }

    def __init__(self, add_size_gb=None, encrypted=None, extend_threshold_percent=None, name=None, path=None, size_gb=None, size_gb_limit=None, volume=None, _configuration=None):  # noqa: E501
        """ApiMachineMount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._add_size_gb = None
        self._encrypted = None
        self._extend_threshold_percent = None
        self._name = None
        self._path = None
        self._size_gb = None
        self._size_gb_limit = None
        self._volume = None
        self.discriminator = None

        if add_size_gb is not None:
            self.add_size_gb = add_size_gb
        if encrypted is not None:
            self.encrypted = encrypted
        if extend_threshold_percent is not None:
            self.extend_threshold_percent = extend_threshold_percent
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if size_gb is not None:
            self.size_gb = size_gb
        if size_gb_limit is not None:
            self.size_gb_limit = size_gb_limit
        if volume is not None:
            self.volume = volume

    @property
    def add_size_gb(self):
        """Gets the add_size_gb of this ApiMachineMount.  # noqa: E501


        :return: The add_size_gb of this ApiMachineMount.  # noqa: E501
        :rtype: int
        """
        return self._add_size_gb

    @add_size_gb.setter
    def add_size_gb(self, add_size_gb):
        """Sets the add_size_gb of this ApiMachineMount.


        :param add_size_gb: The add_size_gb of this ApiMachineMount.  # noqa: E501
        :type: int
        """

        self._add_size_gb = add_size_gb

    @property
    def encrypted(self):
        """Gets the encrypted of this ApiMachineMount.  # noqa: E501


        :return: The encrypted of this ApiMachineMount.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this ApiMachineMount.


        :param encrypted: The encrypted of this ApiMachineMount.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def extend_threshold_percent(self):
        """Gets the extend_threshold_percent of this ApiMachineMount.  # noqa: E501


        :return: The extend_threshold_percent of this ApiMachineMount.  # noqa: E501
        :rtype: int
        """
        return self._extend_threshold_percent

    @extend_threshold_percent.setter
    def extend_threshold_percent(self, extend_threshold_percent):
        """Sets the extend_threshold_percent of this ApiMachineMount.


        :param extend_threshold_percent: The extend_threshold_percent of this ApiMachineMount.  # noqa: E501
        :type: int
        """

        self._extend_threshold_percent = extend_threshold_percent

    @property
    def name(self):
        """Gets the name of this ApiMachineMount.  # noqa: E501


        :return: The name of this ApiMachineMount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiMachineMount.


        :param name: The name of this ApiMachineMount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this ApiMachineMount.  # noqa: E501


        :return: The path of this ApiMachineMount.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ApiMachineMount.


        :param path: The path of this ApiMachineMount.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def size_gb(self):
        """Gets the size_gb of this ApiMachineMount.  # noqa: E501


        :return: The size_gb of this ApiMachineMount.  # noqa: E501
        :rtype: int
        """
        return self._size_gb

    @size_gb.setter
    def size_gb(self, size_gb):
        """Sets the size_gb of this ApiMachineMount.


        :param size_gb: The size_gb of this ApiMachineMount.  # noqa: E501
        :type: int
        """

        self._size_gb = size_gb

    @property
    def size_gb_limit(self):
        """Gets the size_gb_limit of this ApiMachineMount.  # noqa: E501


        :return: The size_gb_limit of this ApiMachineMount.  # noqa: E501
        :rtype: int
        """
        return self._size_gb_limit

    @size_gb_limit.setter
    def size_gb_limit(self, size_gb_limit):
        """Sets the size_gb_limit of this ApiMachineMount.


        :param size_gb_limit: The size_gb_limit of this ApiMachineMount.  # noqa: E501
        :type: int
        """

        self._size_gb_limit = size_gb_limit

    @property
    def volume(self):
        """Gets the volume of this ApiMachineMount.  # noqa: E501


        :return: The volume of this ApiMachineMount.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ApiMachineMount.


        :param volume: The volume of this ApiMachineMount.  # noqa: E501
        :type: str
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiMachineMount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiMachineMount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiMachineMount):
            return True

        return self.to_dict() != other.to_dict()
