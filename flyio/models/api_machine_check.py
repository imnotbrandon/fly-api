# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyio.configuration import Configuration


class ApiMachineCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grace_period': 'str',
        'headers': 'list[ApiMachineHTTPHeader]',
        'interval': 'str',
        'method': 'str',
        'path': 'str',
        'port': 'int',
        'protocol': 'str',
        'timeout': 'str',
        'tls_server_name': 'str',
        'tls_skip_verify': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'grace_period': 'grace_period',
        'headers': 'headers',
        'interval': 'interval',
        'method': 'method',
        'path': 'path',
        'port': 'port',
        'protocol': 'protocol',
        'timeout': 'timeout',
        'tls_server_name': 'tls_server_name',
        'tls_skip_verify': 'tls_skip_verify',
        'type': 'type'
    }

    def __init__(self, grace_period=None, headers=None, interval=None, method=None, path=None, port=None, protocol=None, timeout=None, tls_server_name=None, tls_skip_verify=None, type=None, _configuration=None):  # noqa: E501
        """ApiMachineCheck - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._grace_period = None
        self._headers = None
        self._interval = None
        self._method = None
        self._path = None
        self._port = None
        self._protocol = None
        self._timeout = None
        self._tls_server_name = None
        self._tls_skip_verify = None
        self._type = None
        self.discriminator = None

        if grace_period is not None:
            self.grace_period = grace_period
        if headers is not None:
            self.headers = headers
        if interval is not None:
            self.interval = interval
        if method is not None:
            self.method = method
        if path is not None:
            self.path = path
        if port is not None:
            self.port = port
        if protocol is not None:
            self.protocol = protocol
        if timeout is not None:
            self.timeout = timeout
        if tls_server_name is not None:
            self.tls_server_name = tls_server_name
        if tls_skip_verify is not None:
            self.tls_skip_verify = tls_skip_verify
        if type is not None:
            self.type = type

    @property
    def grace_period(self):
        """Gets the grace_period of this ApiMachineCheck.  # noqa: E501

        The time to wait after a VM starts before checking its health  # noqa: E501

        :return: The grace_period of this ApiMachineCheck.  # noqa: E501
        :rtype: str
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this ApiMachineCheck.

        The time to wait after a VM starts before checking its health  # noqa: E501

        :param grace_period: The grace_period of this ApiMachineCheck.  # noqa: E501
        :type: str
        """

        self._grace_period = grace_period

    @property
    def headers(self):
        """Gets the headers of this ApiMachineCheck.  # noqa: E501


        :return: The headers of this ApiMachineCheck.  # noqa: E501
        :rtype: list[ApiMachineHTTPHeader]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ApiMachineCheck.


        :param headers: The headers of this ApiMachineCheck.  # noqa: E501
        :type: list[ApiMachineHTTPHeader]
        """

        self._headers = headers

    @property
    def interval(self):
        """Gets the interval of this ApiMachineCheck.  # noqa: E501

        The time between connectivity checks  # noqa: E501

        :return: The interval of this ApiMachineCheck.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ApiMachineCheck.

        The time between connectivity checks  # noqa: E501

        :param interval: The interval of this ApiMachineCheck.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def method(self):
        """Gets the method of this ApiMachineCheck.  # noqa: E501

        For http checks, the HTTP method to use to when making the request  # noqa: E501

        :return: The method of this ApiMachineCheck.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ApiMachineCheck.

        For http checks, the HTTP method to use to when making the request  # noqa: E501

        :param method: The method of this ApiMachineCheck.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def path(self):
        """Gets the path of this ApiMachineCheck.  # noqa: E501

        For http checks, the path to send the request to  # noqa: E501

        :return: The path of this ApiMachineCheck.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ApiMachineCheck.

        For http checks, the path to send the request to  # noqa: E501

        :param path: The path of this ApiMachineCheck.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this ApiMachineCheck.  # noqa: E501

        The port to connect to, often the same as internal_port  # noqa: E501

        :return: The port of this ApiMachineCheck.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ApiMachineCheck.

        The port to connect to, often the same as internal_port  # noqa: E501

        :param port: The port of this ApiMachineCheck.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this ApiMachineCheck.  # noqa: E501

        For http checks, whether to use http or https  # noqa: E501

        :return: The protocol of this ApiMachineCheck.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ApiMachineCheck.

        For http checks, whether to use http or https  # noqa: E501

        :param protocol: The protocol of this ApiMachineCheck.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def timeout(self):
        """Gets the timeout of this ApiMachineCheck.  # noqa: E501

        The maximum time a connection can take before being reported as failing its health check  # noqa: E501

        :return: The timeout of this ApiMachineCheck.  # noqa: E501
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ApiMachineCheck.

        The maximum time a connection can take before being reported as failing its health check  # noqa: E501

        :param timeout: The timeout of this ApiMachineCheck.  # noqa: E501
        :type: str
        """

        self._timeout = timeout

    @property
    def tls_server_name(self):
        """Gets the tls_server_name of this ApiMachineCheck.  # noqa: E501

        If the protocol is https, the hostname to use for TLS certificate validation  # noqa: E501

        :return: The tls_server_name of this ApiMachineCheck.  # noqa: E501
        :rtype: str
        """
        return self._tls_server_name

    @tls_server_name.setter
    def tls_server_name(self, tls_server_name):
        """Sets the tls_server_name of this ApiMachineCheck.

        If the protocol is https, the hostname to use for TLS certificate validation  # noqa: E501

        :param tls_server_name: The tls_server_name of this ApiMachineCheck.  # noqa: E501
        :type: str
        """

        self._tls_server_name = tls_server_name

    @property
    def tls_skip_verify(self):
        """Gets the tls_skip_verify of this ApiMachineCheck.  # noqa: E501

        For http checks with https protocol, whether or not to verify the TLS certificate  # noqa: E501

        :return: The tls_skip_verify of this ApiMachineCheck.  # noqa: E501
        :rtype: bool
        """
        return self._tls_skip_verify

    @tls_skip_verify.setter
    def tls_skip_verify(self, tls_skip_verify):
        """Sets the tls_skip_verify of this ApiMachineCheck.

        For http checks with https protocol, whether or not to verify the TLS certificate  # noqa: E501

        :param tls_skip_verify: The tls_skip_verify of this ApiMachineCheck.  # noqa: E501
        :type: bool
        """

        self._tls_skip_verify = tls_skip_verify

    @property
    def type(self):
        """Gets the type of this ApiMachineCheck.  # noqa: E501

        tcp or http  # noqa: E501

        :return: The type of this ApiMachineCheck.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiMachineCheck.

        tcp or http  # noqa: E501

        :param type: The type of this ApiMachineCheck.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiMachineCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiMachineCheck):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiMachineCheck):
            return True

        return self.to_dict() != other.to_dict()
