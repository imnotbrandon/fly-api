# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyio.configuration import Configuration


class CreateVolumeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compute': 'ApiMachineGuest',
        'encrypted': 'bool',
        'fstype': 'str',
        'machines_only': 'bool',
        'name': 'str',
        'region': 'str',
        'require_unique_zone': 'bool',
        'size_gb': 'int',
        'snapshot_id': 'str',
        'snapshot_retention': 'int',
        'source_volume_id': 'str'
    }

    attribute_map = {
        'compute': 'compute',
        'encrypted': 'encrypted',
        'fstype': 'fstype',
        'machines_only': 'machines_only',
        'name': 'name',
        'region': 'region',
        'require_unique_zone': 'require_unique_zone',
        'size_gb': 'size_gb',
        'snapshot_id': 'snapshot_id',
        'snapshot_retention': 'snapshot_retention',
        'source_volume_id': 'source_volume_id'
    }

    def __init__(self, compute=None, encrypted=None, fstype=None, machines_only=None, name=None, region=None, require_unique_zone=None, size_gb=None, snapshot_id=None, snapshot_retention=None, source_volume_id=None, _configuration=None):  # noqa: E501
        """CreateVolumeRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._compute = None
        self._encrypted = None
        self._fstype = None
        self._machines_only = None
        self._name = None
        self._region = None
        self._require_unique_zone = None
        self._size_gb = None
        self._snapshot_id = None
        self._snapshot_retention = None
        self._source_volume_id = None
        self.discriminator = None

        if compute is not None:
            self.compute = compute
        if encrypted is not None:
            self.encrypted = encrypted
        if fstype is not None:
            self.fstype = fstype
        if machines_only is not None:
            self.machines_only = machines_only
        if name is not None:
            self.name = name
        if region is not None:
            self.region = region
        if require_unique_zone is not None:
            self.require_unique_zone = require_unique_zone
        if size_gb is not None:
            self.size_gb = size_gb
        if snapshot_id is not None:
            self.snapshot_id = snapshot_id
        if snapshot_retention is not None:
            self.snapshot_retention = snapshot_retention
        if source_volume_id is not None:
            self.source_volume_id = source_volume_id

    @property
    def compute(self):
        """Gets the compute of this CreateVolumeRequest.  # noqa: E501


        :return: The compute of this CreateVolumeRequest.  # noqa: E501
        :rtype: ApiMachineGuest
        """
        return self._compute

    @compute.setter
    def compute(self, compute):
        """Sets the compute of this CreateVolumeRequest.


        :param compute: The compute of this CreateVolumeRequest.  # noqa: E501
        :type: ApiMachineGuest
        """

        self._compute = compute

    @property
    def encrypted(self):
        """Gets the encrypted of this CreateVolumeRequest.  # noqa: E501


        :return: The encrypted of this CreateVolumeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this CreateVolumeRequest.


        :param encrypted: The encrypted of this CreateVolumeRequest.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def fstype(self):
        """Gets the fstype of this CreateVolumeRequest.  # noqa: E501


        :return: The fstype of this CreateVolumeRequest.  # noqa: E501
        :rtype: str
        """
        return self._fstype

    @fstype.setter
    def fstype(self, fstype):
        """Sets the fstype of this CreateVolumeRequest.


        :param fstype: The fstype of this CreateVolumeRequest.  # noqa: E501
        :type: str
        """

        self._fstype = fstype

    @property
    def machines_only(self):
        """Gets the machines_only of this CreateVolumeRequest.  # noqa: E501


        :return: The machines_only of this CreateVolumeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._machines_only

    @machines_only.setter
    def machines_only(self, machines_only):
        """Sets the machines_only of this CreateVolumeRequest.


        :param machines_only: The machines_only of this CreateVolumeRequest.  # noqa: E501
        :type: bool
        """

        self._machines_only = machines_only

    @property
    def name(self):
        """Gets the name of this CreateVolumeRequest.  # noqa: E501


        :return: The name of this CreateVolumeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateVolumeRequest.


        :param name: The name of this CreateVolumeRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def region(self):
        """Gets the region of this CreateVolumeRequest.  # noqa: E501


        :return: The region of this CreateVolumeRequest.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CreateVolumeRequest.


        :param region: The region of this CreateVolumeRequest.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def require_unique_zone(self):
        """Gets the require_unique_zone of this CreateVolumeRequest.  # noqa: E501


        :return: The require_unique_zone of this CreateVolumeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._require_unique_zone

    @require_unique_zone.setter
    def require_unique_zone(self, require_unique_zone):
        """Sets the require_unique_zone of this CreateVolumeRequest.


        :param require_unique_zone: The require_unique_zone of this CreateVolumeRequest.  # noqa: E501
        :type: bool
        """

        self._require_unique_zone = require_unique_zone

    @property
    def size_gb(self):
        """Gets the size_gb of this CreateVolumeRequest.  # noqa: E501


        :return: The size_gb of this CreateVolumeRequest.  # noqa: E501
        :rtype: int
        """
        return self._size_gb

    @size_gb.setter
    def size_gb(self, size_gb):
        """Sets the size_gb of this CreateVolumeRequest.


        :param size_gb: The size_gb of this CreateVolumeRequest.  # noqa: E501
        :type: int
        """

        self._size_gb = size_gb

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this CreateVolumeRequest.  # noqa: E501

        restore from snapshot  # noqa: E501

        :return: The snapshot_id of this CreateVolumeRequest.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this CreateVolumeRequest.

        restore from snapshot  # noqa: E501

        :param snapshot_id: The snapshot_id of this CreateVolumeRequest.  # noqa: E501
        :type: str
        """

        self._snapshot_id = snapshot_id

    @property
    def snapshot_retention(self):
        """Gets the snapshot_retention of this CreateVolumeRequest.  # noqa: E501


        :return: The snapshot_retention of this CreateVolumeRequest.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_retention

    @snapshot_retention.setter
    def snapshot_retention(self, snapshot_retention):
        """Sets the snapshot_retention of this CreateVolumeRequest.


        :param snapshot_retention: The snapshot_retention of this CreateVolumeRequest.  # noqa: E501
        :type: int
        """

        self._snapshot_retention = snapshot_retention

    @property
    def source_volume_id(self):
        """Gets the source_volume_id of this CreateVolumeRequest.  # noqa: E501

        fork from remote volume  # noqa: E501

        :return: The source_volume_id of this CreateVolumeRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_volume_id

    @source_volume_id.setter
    def source_volume_id(self, source_volume_id):
        """Sets the source_volume_id of this CreateVolumeRequest.

        fork from remote volume  # noqa: E501

        :param source_volume_id: The source_volume_id of this CreateVolumeRequest.  # noqa: E501
        :type: str
        """

        self._source_volume_id = source_volume_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateVolumeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateVolumeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateVolumeRequest):
            return True

        return self.to_dict() != other.to_dict()
