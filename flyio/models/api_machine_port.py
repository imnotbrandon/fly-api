# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyio.configuration import Configuration


class ApiMachinePort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_port': 'int',
        'force_https': 'bool',
        'handlers': 'list[str]',
        'http_options': 'ApiHTTPOptions',
        'port': 'int',
        'proxy_proto_options': 'ApiProxyProtoOptions',
        'start_port': 'int',
        'tls_options': 'ApiTLSOptions'
    }

    attribute_map = {
        'end_port': 'end_port',
        'force_https': 'force_https',
        'handlers': 'handlers',
        'http_options': 'http_options',
        'port': 'port',
        'proxy_proto_options': 'proxy_proto_options',
        'start_port': 'start_port',
        'tls_options': 'tls_options'
    }

    def __init__(self, end_port=None, force_https=None, handlers=None, http_options=None, port=None, proxy_proto_options=None, start_port=None, tls_options=None, _configuration=None):  # noqa: E501
        """ApiMachinePort - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._end_port = None
        self._force_https = None
        self._handlers = None
        self._http_options = None
        self._port = None
        self._proxy_proto_options = None
        self._start_port = None
        self._tls_options = None
        self.discriminator = None

        if end_port is not None:
            self.end_port = end_port
        if force_https is not None:
            self.force_https = force_https
        if handlers is not None:
            self.handlers = handlers
        if http_options is not None:
            self.http_options = http_options
        if port is not None:
            self.port = port
        if proxy_proto_options is not None:
            self.proxy_proto_options = proxy_proto_options
        if start_port is not None:
            self.start_port = start_port
        if tls_options is not None:
            self.tls_options = tls_options

    @property
    def end_port(self):
        """Gets the end_port of this ApiMachinePort.  # noqa: E501


        :return: The end_port of this ApiMachinePort.  # noqa: E501
        :rtype: int
        """
        return self._end_port

    @end_port.setter
    def end_port(self, end_port):
        """Sets the end_port of this ApiMachinePort.


        :param end_port: The end_port of this ApiMachinePort.  # noqa: E501
        :type: int
        """

        self._end_port = end_port

    @property
    def force_https(self):
        """Gets the force_https of this ApiMachinePort.  # noqa: E501


        :return: The force_https of this ApiMachinePort.  # noqa: E501
        :rtype: bool
        """
        return self._force_https

    @force_https.setter
    def force_https(self, force_https):
        """Sets the force_https of this ApiMachinePort.


        :param force_https: The force_https of this ApiMachinePort.  # noqa: E501
        :type: bool
        """

        self._force_https = force_https

    @property
    def handlers(self):
        """Gets the handlers of this ApiMachinePort.  # noqa: E501


        :return: The handlers of this ApiMachinePort.  # noqa: E501
        :rtype: list[str]
        """
        return self._handlers

    @handlers.setter
    def handlers(self, handlers):
        """Sets the handlers of this ApiMachinePort.


        :param handlers: The handlers of this ApiMachinePort.  # noqa: E501
        :type: list[str]
        """

        self._handlers = handlers

    @property
    def http_options(self):
        """Gets the http_options of this ApiMachinePort.  # noqa: E501


        :return: The http_options of this ApiMachinePort.  # noqa: E501
        :rtype: ApiHTTPOptions
        """
        return self._http_options

    @http_options.setter
    def http_options(self, http_options):
        """Sets the http_options of this ApiMachinePort.


        :param http_options: The http_options of this ApiMachinePort.  # noqa: E501
        :type: ApiHTTPOptions
        """

        self._http_options = http_options

    @property
    def port(self):
        """Gets the port of this ApiMachinePort.  # noqa: E501


        :return: The port of this ApiMachinePort.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ApiMachinePort.


        :param port: The port of this ApiMachinePort.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def proxy_proto_options(self):
        """Gets the proxy_proto_options of this ApiMachinePort.  # noqa: E501


        :return: The proxy_proto_options of this ApiMachinePort.  # noqa: E501
        :rtype: ApiProxyProtoOptions
        """
        return self._proxy_proto_options

    @proxy_proto_options.setter
    def proxy_proto_options(self, proxy_proto_options):
        """Sets the proxy_proto_options of this ApiMachinePort.


        :param proxy_proto_options: The proxy_proto_options of this ApiMachinePort.  # noqa: E501
        :type: ApiProxyProtoOptions
        """

        self._proxy_proto_options = proxy_proto_options

    @property
    def start_port(self):
        """Gets the start_port of this ApiMachinePort.  # noqa: E501


        :return: The start_port of this ApiMachinePort.  # noqa: E501
        :rtype: int
        """
        return self._start_port

    @start_port.setter
    def start_port(self, start_port):
        """Sets the start_port of this ApiMachinePort.


        :param start_port: The start_port of this ApiMachinePort.  # noqa: E501
        :type: int
        """

        self._start_port = start_port

    @property
    def tls_options(self):
        """Gets the tls_options of this ApiMachinePort.  # noqa: E501


        :return: The tls_options of this ApiMachinePort.  # noqa: E501
        :rtype: ApiTLSOptions
        """
        return self._tls_options

    @tls_options.setter
    def tls_options(self, tls_options):
        """Sets the tls_options of this ApiMachinePort.


        :param tls_options: The tls_options of this ApiMachinePort.  # noqa: E501
        :type: ApiTLSOptions
        """

        self._tls_options = tls_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiMachinePort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiMachinePort):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiMachinePort):
            return True

        return self.to_dict() != other.to_dict()
