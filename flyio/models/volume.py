# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyio.configuration import Configuration


class Volume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attached_alloc_id': 'str',
        'attached_machine_id': 'str',
        'block_size': 'int',
        'blocks': 'int',
        'blocks_avail': 'int',
        'blocks_free': 'int',
        'created_at': 'str',
        'encrypted': 'bool',
        'fstype': 'str',
        'id': 'str',
        'name': 'str',
        'region': 'str',
        'size_gb': 'int',
        'snapshot_retention': 'int',
        'state': 'str',
        'zone': 'str'
    }

    attribute_map = {
        'attached_alloc_id': 'attached_alloc_id',
        'attached_machine_id': 'attached_machine_id',
        'block_size': 'block_size',
        'blocks': 'blocks',
        'blocks_avail': 'blocks_avail',
        'blocks_free': 'blocks_free',
        'created_at': 'created_at',
        'encrypted': 'encrypted',
        'fstype': 'fstype',
        'id': 'id',
        'name': 'name',
        'region': 'region',
        'size_gb': 'size_gb',
        'snapshot_retention': 'snapshot_retention',
        'state': 'state',
        'zone': 'zone'
    }

    def __init__(self, attached_alloc_id=None, attached_machine_id=None, block_size=None, blocks=None, blocks_avail=None, blocks_free=None, created_at=None, encrypted=None, fstype=None, id=None, name=None, region=None, size_gb=None, snapshot_retention=None, state=None, zone=None, _configuration=None):  # noqa: E501
        """Volume - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attached_alloc_id = None
        self._attached_machine_id = None
        self._block_size = None
        self._blocks = None
        self._blocks_avail = None
        self._blocks_free = None
        self._created_at = None
        self._encrypted = None
        self._fstype = None
        self._id = None
        self._name = None
        self._region = None
        self._size_gb = None
        self._snapshot_retention = None
        self._state = None
        self._zone = None
        self.discriminator = None

        if attached_alloc_id is not None:
            self.attached_alloc_id = attached_alloc_id
        if attached_machine_id is not None:
            self.attached_machine_id = attached_machine_id
        if block_size is not None:
            self.block_size = block_size
        if blocks is not None:
            self.blocks = blocks
        if blocks_avail is not None:
            self.blocks_avail = blocks_avail
        if blocks_free is not None:
            self.blocks_free = blocks_free
        if created_at is not None:
            self.created_at = created_at
        if encrypted is not None:
            self.encrypted = encrypted
        if fstype is not None:
            self.fstype = fstype
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if region is not None:
            self.region = region
        if size_gb is not None:
            self.size_gb = size_gb
        if snapshot_retention is not None:
            self.snapshot_retention = snapshot_retention
        if state is not None:
            self.state = state
        if zone is not None:
            self.zone = zone

    @property
    def attached_alloc_id(self):
        """Gets the attached_alloc_id of this Volume.  # noqa: E501


        :return: The attached_alloc_id of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._attached_alloc_id

    @attached_alloc_id.setter
    def attached_alloc_id(self, attached_alloc_id):
        """Sets the attached_alloc_id of this Volume.


        :param attached_alloc_id: The attached_alloc_id of this Volume.  # noqa: E501
        :type: str
        """

        self._attached_alloc_id = attached_alloc_id

    @property
    def attached_machine_id(self):
        """Gets the attached_machine_id of this Volume.  # noqa: E501


        :return: The attached_machine_id of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._attached_machine_id

    @attached_machine_id.setter
    def attached_machine_id(self, attached_machine_id):
        """Sets the attached_machine_id of this Volume.


        :param attached_machine_id: The attached_machine_id of this Volume.  # noqa: E501
        :type: str
        """

        self._attached_machine_id = attached_machine_id

    @property
    def block_size(self):
        """Gets the block_size of this Volume.  # noqa: E501


        :return: The block_size of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this Volume.


        :param block_size: The block_size of this Volume.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def blocks(self):
        """Gets the blocks of this Volume.  # noqa: E501


        :return: The blocks of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this Volume.


        :param blocks: The blocks of this Volume.  # noqa: E501
        :type: int
        """

        self._blocks = blocks

    @property
    def blocks_avail(self):
        """Gets the blocks_avail of this Volume.  # noqa: E501


        :return: The blocks_avail of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._blocks_avail

    @blocks_avail.setter
    def blocks_avail(self, blocks_avail):
        """Sets the blocks_avail of this Volume.


        :param blocks_avail: The blocks_avail of this Volume.  # noqa: E501
        :type: int
        """

        self._blocks_avail = blocks_avail

    @property
    def blocks_free(self):
        """Gets the blocks_free of this Volume.  # noqa: E501


        :return: The blocks_free of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._blocks_free

    @blocks_free.setter
    def blocks_free(self, blocks_free):
        """Sets the blocks_free of this Volume.


        :param blocks_free: The blocks_free of this Volume.  # noqa: E501
        :type: int
        """

        self._blocks_free = blocks_free

    @property
    def created_at(self):
        """Gets the created_at of this Volume.  # noqa: E501


        :return: The created_at of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Volume.


        :param created_at: The created_at of this Volume.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def encrypted(self):
        """Gets the encrypted of this Volume.  # noqa: E501


        :return: The encrypted of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this Volume.


        :param encrypted: The encrypted of this Volume.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def fstype(self):
        """Gets the fstype of this Volume.  # noqa: E501


        :return: The fstype of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._fstype

    @fstype.setter
    def fstype(self, fstype):
        """Sets the fstype of this Volume.


        :param fstype: The fstype of this Volume.  # noqa: E501
        :type: str
        """

        self._fstype = fstype

    @property
    def id(self):
        """Gets the id of this Volume.  # noqa: E501


        :return: The id of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volume.


        :param id: The id of this Volume.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Volume.  # noqa: E501


        :return: The name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.


        :param name: The name of this Volume.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def region(self):
        """Gets the region of this Volume.  # noqa: E501


        :return: The region of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Volume.


        :param region: The region of this Volume.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def size_gb(self):
        """Gets the size_gb of this Volume.  # noqa: E501


        :return: The size_gb of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._size_gb

    @size_gb.setter
    def size_gb(self, size_gb):
        """Sets the size_gb of this Volume.


        :param size_gb: The size_gb of this Volume.  # noqa: E501
        :type: int
        """

        self._size_gb = size_gb

    @property
    def snapshot_retention(self):
        """Gets the snapshot_retention of this Volume.  # noqa: E501


        :return: The snapshot_retention of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_retention

    @snapshot_retention.setter
    def snapshot_retention(self, snapshot_retention):
        """Sets the snapshot_retention of this Volume.


        :param snapshot_retention: The snapshot_retention of this Volume.  # noqa: E501
        :type: int
        """

        self._snapshot_retention = snapshot_retention

    @property
    def state(self):
        """Gets the state of this Volume.  # noqa: E501


        :return: The state of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Volume.


        :param state: The state of this Volume.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zone(self):
        """Gets the zone of this Volume.  # noqa: E501


        :return: The zone of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this Volume.


        :param zone: The zone of this Volume.  # noqa: E501
        :type: str
        """

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Volume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Volume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Volume):
            return True

        return self.to_dict() != other.to_dict()
