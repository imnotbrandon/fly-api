# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyio.configuration import Configuration


class ApiMachineProcess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cmd': 'list[str]',
        'entrypoint': 'list[str]',
        'env': 'dict(str, str)',
        '_exec': 'list[str]',
        'user': 'str'
    }

    attribute_map = {
        'cmd': 'cmd',
        'entrypoint': 'entrypoint',
        'env': 'env',
        '_exec': 'exec',
        'user': 'user'
    }

    def __init__(self, cmd=None, entrypoint=None, env=None, _exec=None, user=None, _configuration=None):  # noqa: E501
        """ApiMachineProcess - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cmd = None
        self._entrypoint = None
        self._env = None
        self.__exec = None
        self._user = None
        self.discriminator = None

        if cmd is not None:
            self.cmd = cmd
        if entrypoint is not None:
            self.entrypoint = entrypoint
        if env is not None:
            self.env = env
        if _exec is not None:
            self._exec = _exec
        if user is not None:
            self.user = user

    @property
    def cmd(self):
        """Gets the cmd of this ApiMachineProcess.  # noqa: E501


        :return: The cmd of this ApiMachineProcess.  # noqa: E501
        :rtype: list[str]
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this ApiMachineProcess.


        :param cmd: The cmd of this ApiMachineProcess.  # noqa: E501
        :type: list[str]
        """

        self._cmd = cmd

    @property
    def entrypoint(self):
        """Gets the entrypoint of this ApiMachineProcess.  # noqa: E501


        :return: The entrypoint of this ApiMachineProcess.  # noqa: E501
        :rtype: list[str]
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this ApiMachineProcess.


        :param entrypoint: The entrypoint of this ApiMachineProcess.  # noqa: E501
        :type: list[str]
        """

        self._entrypoint = entrypoint

    @property
    def env(self):
        """Gets the env of this ApiMachineProcess.  # noqa: E501


        :return: The env of this ApiMachineProcess.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this ApiMachineProcess.


        :param env: The env of this ApiMachineProcess.  # noqa: E501
        :type: dict(str, str)
        """

        self._env = env

    @property
    def _exec(self):
        """Gets the _exec of this ApiMachineProcess.  # noqa: E501


        :return: The _exec of this ApiMachineProcess.  # noqa: E501
        :rtype: list[str]
        """
        return self.__exec

    @_exec.setter
    def _exec(self, _exec):
        """Sets the _exec of this ApiMachineProcess.


        :param _exec: The _exec of this ApiMachineProcess.  # noqa: E501
        :type: list[str]
        """

        self.__exec = _exec

    @property
    def user(self):
        """Gets the user of this ApiMachineProcess.  # noqa: E501


        :return: The user of this ApiMachineProcess.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ApiMachineProcess.


        :param user: The user of this ApiMachineProcess.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiMachineProcess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiMachineProcess):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiMachineProcess):
            return True

        return self.to_dict() != other.to_dict()
