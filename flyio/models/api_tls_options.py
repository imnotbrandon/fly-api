# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyio.configuration import Configuration


class ApiTLSOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alpn': 'list[str]',
        'default_self_signed': 'bool',
        'versions': 'list[str]'
    }

    attribute_map = {
        'alpn': 'alpn',
        'default_self_signed': 'default_self_signed',
        'versions': 'versions'
    }

    def __init__(self, alpn=None, default_self_signed=None, versions=None, _configuration=None):  # noqa: E501
        """ApiTLSOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alpn = None
        self._default_self_signed = None
        self._versions = None
        self.discriminator = None

        if alpn is not None:
            self.alpn = alpn
        if default_self_signed is not None:
            self.default_self_signed = default_self_signed
        if versions is not None:
            self.versions = versions

    @property
    def alpn(self):
        """Gets the alpn of this ApiTLSOptions.  # noqa: E501


        :return: The alpn of this ApiTLSOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._alpn

    @alpn.setter
    def alpn(self, alpn):
        """Sets the alpn of this ApiTLSOptions.


        :param alpn: The alpn of this ApiTLSOptions.  # noqa: E501
        :type: list[str]
        """

        self._alpn = alpn

    @property
    def default_self_signed(self):
        """Gets the default_self_signed of this ApiTLSOptions.  # noqa: E501


        :return: The default_self_signed of this ApiTLSOptions.  # noqa: E501
        :rtype: bool
        """
        return self._default_self_signed

    @default_self_signed.setter
    def default_self_signed(self, default_self_signed):
        """Sets the default_self_signed of this ApiTLSOptions.


        :param default_self_signed: The default_self_signed of this ApiTLSOptions.  # noqa: E501
        :type: bool
        """

        self._default_self_signed = default_self_signed

    @property
    def versions(self):
        """Gets the versions of this ApiTLSOptions.  # noqa: E501


        :return: The versions of this ApiTLSOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this ApiTLSOptions.


        :param versions: The versions of this ApiTLSOptions.  # noqa: E501
        :type: list[str]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiTLSOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiTLSOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiTLSOptions):
            return True

        return self.to_dict() != other.to_dict()
