# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyio.configuration import Configuration


class ApiMachineGuest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_kind': 'str',
        'cpus': 'int',
        'gpu_kind': 'str',
        'host_dedication_id': 'str',
        'kernel_args': 'list[str]',
        'memory_mb': 'int'
    }

    attribute_map = {
        'cpu_kind': 'cpu_kind',
        'cpus': 'cpus',
        'gpu_kind': 'gpu_kind',
        'host_dedication_id': 'host_dedication_id',
        'kernel_args': 'kernel_args',
        'memory_mb': 'memory_mb'
    }

    def __init__(self, cpu_kind=None, cpus=None, gpu_kind=None, host_dedication_id=None, kernel_args=None, memory_mb=None, _configuration=None):  # noqa: E501
        """ApiMachineGuest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cpu_kind = None
        self._cpus = None
        self._gpu_kind = None
        self._host_dedication_id = None
        self._kernel_args = None
        self._memory_mb = None
        self.discriminator = None

        if cpu_kind is not None:
            self.cpu_kind = cpu_kind
        if cpus is not None:
            self.cpus = cpus
        if gpu_kind is not None:
            self.gpu_kind = gpu_kind
        if host_dedication_id is not None:
            self.host_dedication_id = host_dedication_id
        if kernel_args is not None:
            self.kernel_args = kernel_args
        if memory_mb is not None:
            self.memory_mb = memory_mb

    @property
    def cpu_kind(self):
        """Gets the cpu_kind of this ApiMachineGuest.  # noqa: E501


        :return: The cpu_kind of this ApiMachineGuest.  # noqa: E501
        :rtype: str
        """
        return self._cpu_kind

    @cpu_kind.setter
    def cpu_kind(self, cpu_kind):
        """Sets the cpu_kind of this ApiMachineGuest.


        :param cpu_kind: The cpu_kind of this ApiMachineGuest.  # noqa: E501
        :type: str
        """

        self._cpu_kind = cpu_kind

    @property
    def cpus(self):
        """Gets the cpus of this ApiMachineGuest.  # noqa: E501


        :return: The cpus of this ApiMachineGuest.  # noqa: E501
        :rtype: int
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this ApiMachineGuest.


        :param cpus: The cpus of this ApiMachineGuest.  # noqa: E501
        :type: int
        """

        self._cpus = cpus

    @property
    def gpu_kind(self):
        """Gets the gpu_kind of this ApiMachineGuest.  # noqa: E501


        :return: The gpu_kind of this ApiMachineGuest.  # noqa: E501
        :rtype: str
        """
        return self._gpu_kind

    @gpu_kind.setter
    def gpu_kind(self, gpu_kind):
        """Sets the gpu_kind of this ApiMachineGuest.


        :param gpu_kind: The gpu_kind of this ApiMachineGuest.  # noqa: E501
        :type: str
        """

        self._gpu_kind = gpu_kind

    @property
    def host_dedication_id(self):
        """Gets the host_dedication_id of this ApiMachineGuest.  # noqa: E501


        :return: The host_dedication_id of this ApiMachineGuest.  # noqa: E501
        :rtype: str
        """
        return self._host_dedication_id

    @host_dedication_id.setter
    def host_dedication_id(self, host_dedication_id):
        """Sets the host_dedication_id of this ApiMachineGuest.


        :param host_dedication_id: The host_dedication_id of this ApiMachineGuest.  # noqa: E501
        :type: str
        """

        self._host_dedication_id = host_dedication_id

    @property
    def kernel_args(self):
        """Gets the kernel_args of this ApiMachineGuest.  # noqa: E501


        :return: The kernel_args of this ApiMachineGuest.  # noqa: E501
        :rtype: list[str]
        """
        return self._kernel_args

    @kernel_args.setter
    def kernel_args(self, kernel_args):
        """Sets the kernel_args of this ApiMachineGuest.


        :param kernel_args: The kernel_args of this ApiMachineGuest.  # noqa: E501
        :type: list[str]
        """

        self._kernel_args = kernel_args

    @property
    def memory_mb(self):
        """Gets the memory_mb of this ApiMachineGuest.  # noqa: E501


        :return: The memory_mb of this ApiMachineGuest.  # noqa: E501
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this ApiMachineGuest.


        :param memory_mb: The memory_mb of this ApiMachineGuest.  # noqa: E501
        :type: int
        """

        self._memory_mb = memory_mb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiMachineGuest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiMachineGuest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiMachineGuest):
            return True

        return self.to_dict() != other.to_dict()
