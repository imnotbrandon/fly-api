# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flyio.api_client import ApiClient


class MachinesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def machines_cordon(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_cordon  # noqa: E501

        “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_cordon(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_cordon_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_cordon_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_cordon_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_cordon  # noqa: E501

        “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_cordon_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_cordon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_cordon`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_cordon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/cordon', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_create(self, app_name, request, **kwargs):  # noqa: E501
        """machines_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_create(app_name, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param CreateMachineRequest request: Create machine request (required)
        :return: Machine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_create_with_http_info(app_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_create_with_http_info(app_name, request, **kwargs)  # noqa: E501
            return data

    def machines_create_with_http_info(self, app_name, request, **kwargs):  # noqa: E501
        """machines_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_create_with_http_info(app_name, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param CreateMachineRequest request: Create machine request (required)
        :return: Machine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_create`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `machines_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Machine',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_create_lease(self, app_name, machine_id, request, **kwargs):  # noqa: E501
        """machines_create_lease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_create_lease(app_name, machine_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param CreateLeaseRequest request: Request body (required)
        :return: Lease
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_create_lease_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_create_lease_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501
            return data

    def machines_create_lease_with_http_info(self, app_name, machine_id, request, **kwargs):  # noqa: E501
        """machines_create_lease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_create_lease_with_http_info(app_name, machine_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param CreateLeaseRequest request: Request body (required)
        :return: Lease
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_create_lease" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_create_lease`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_create_lease`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `machines_create_lease`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/lease', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Lease',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_delete(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_delete(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_delete_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_delete_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_delete_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_delete_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_delete`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_delete_metadata(self, app_name, machine_id, key, **kwargs):  # noqa: E501
        """machines_delete_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_delete_metadata(app_name, machine_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param str key: Metadata Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_delete_metadata_with_http_info(app_name, machine_id, key, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_delete_metadata_with_http_info(app_name, machine_id, key, **kwargs)  # noqa: E501
            return data

    def machines_delete_metadata_with_http_info(self, app_name, machine_id, key, **kwargs):  # noqa: E501
        """machines_delete_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_delete_metadata_with_http_info(app_name, machine_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param str key: Metadata Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_delete_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_delete_metadata`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_delete_metadata`")  # noqa: E501
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `machines_delete_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/metadata/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_exec(self, app_name, machine_id, request, **kwargs):  # noqa: E501
        """machines_exec  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_exec(app_name, machine_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param MachineExecRequest request: Request body (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_exec_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_exec_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501
            return data

    def machines_exec_with_http_info(self, app_name, machine_id, request, **kwargs):  # noqa: E501
        """machines_exec  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_exec_with_http_info(app_name, machine_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param MachineExecRequest request: Request body (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_exec" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_exec`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_exec`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `machines_exec`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/exec', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_list(self, app_name, **kwargs):  # noqa: E501
        """machines_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_list(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param bool include_deleted: Include deleted machines
        :param str region: Region filter
        :return: list[Machine]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_list_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_list_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def machines_list_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """machines_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_list_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param bool include_deleted: Include deleted machines
        :param str region: Region filter
        :return: list[Machine]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'include_deleted', 'region']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'include_deleted' in params:
            query_params.append(('include_deleted', params['include_deleted']))  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Machine]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_list_events(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_list_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_list_events(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: list[MachineEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_list_events_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_list_events_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_list_events_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_list_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_list_events_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: list[MachineEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_list_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_list_events`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_list_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MachineEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_list_processes(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_list_processes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_list_processes(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param str sort_by: Sort by
        :param str order: Order
        :return: list[ProcessStat]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_list_processes_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_list_processes_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_list_processes_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_list_processes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_list_processes_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param str sort_by: Sort by
        :param str order: Order
        :return: list[ProcessStat]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id', 'sort_by', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_list_processes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_list_processes`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_list_processes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/ps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProcessStat]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_list_versions(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_list_versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_list_versions(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: list[MachineVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_list_versions_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_list_versions_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_list_versions_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_list_versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_list_versions_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: list[MachineVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_list_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_list_versions`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_list_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MachineVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_release_lease(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_release_lease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_release_lease(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_release_lease_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_release_lease_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_release_lease_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_release_lease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_release_lease_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_release_lease" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_release_lease`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_release_lease`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/lease', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_restart(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_restart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_restart(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param str timeout: Restart timeout as a Go duration string or number of seconds
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_restart_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_restart_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_restart_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_restart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_restart_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param str timeout: Restart timeout as a Go duration string or number of seconds
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id', 'timeout']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_restart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_restart`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_restart`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []
        if 'timeout' in params:
            query_params.append(('timeout', params['timeout']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_show(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_show  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_show(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: Machine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_show_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_show_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_show_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_show  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_show_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: Machine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_show`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_show`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Machine',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_show_lease(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_show_lease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_show_lease(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: Lease
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_show_lease_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_show_lease_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_show_lease_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_show_lease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_show_lease_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: Lease
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_show_lease" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_show_lease`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_show_lease`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/lease', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Lease',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_show_metadata(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_show_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_show_metadata(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_show_metadata_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_show_metadata_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_show_metadata_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_show_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_show_metadata_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_show_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_show_metadata`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_show_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_signal(self, app_name, machine_id, request, **kwargs):  # noqa: E501
        """machines_signal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_signal(app_name, machine_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param SignalRequest request: Request body (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_signal_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_signal_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501
            return data

    def machines_signal_with_http_info(self, app_name, machine_id, request, **kwargs):  # noqa: E501
        """machines_signal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_signal_with_http_info(app_name, machine_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param SignalRequest request: Request body (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_signal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_signal`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_signal`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `machines_signal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/signal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_start(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_start  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_start(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_start_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_start_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_start_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_start  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_start_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_start" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_start`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_start`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_stop(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_stop  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_stop(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param StopRequest request: Optional request body
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_stop_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_stop_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_stop_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_stop  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_stop_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param StopRequest request: Optional request body
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_stop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_stop`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_stop`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_uncordon(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_uncordon  # noqa: E501

        “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_uncordon(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_uncordon_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_uncordon_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_uncordon_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_uncordon  # noqa: E501

        “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_uncordon_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_uncordon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_uncordon`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_uncordon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/uncordon', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_update(self, app_name, machine_id, request, **kwargs):  # noqa: E501
        """machines_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_update(app_name, machine_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param UpdateMachineRequest request: Request body (required)
        :return: Machine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_update_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_update_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501
            return data

    def machines_update_with_http_info(self, app_name, machine_id, request, **kwargs):  # noqa: E501
        """machines_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_update_with_http_info(app_name, machine_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param UpdateMachineRequest request: Request body (required)
        :return: Machine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_update`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_update`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `machines_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Machine',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_update_metadata(self, app_name, machine_id, key, **kwargs):  # noqa: E501
        """machines_update_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_update_metadata(app_name, machine_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param str key: Metadata Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_update_metadata_with_http_info(app_name, machine_id, key, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_update_metadata_with_http_info(app_name, machine_id, key, **kwargs)  # noqa: E501
            return data

    def machines_update_metadata_with_http_info(self, app_name, machine_id, key, **kwargs):  # noqa: E501
        """machines_update_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_update_metadata_with_http_info(app_name, machine_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param str key: Metadata Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_update_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_update_metadata`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_update_metadata`")  # noqa: E501
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `machines_update_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/metadata/{key}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def machines_wait(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_wait  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_wait(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param str instance_id: instance? version? TODO
        :param int timeout: wait timeout. default 60s
        :param str state: desired state
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.machines_wait_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.machines_wait_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501
            return data

    def machines_wait_with_http_info(self, app_name, machine_id, **kwargs):  # noqa: E501
        """machines_wait  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machines_wait_with_http_info(app_name, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str machine_id: Machine ID (required)
        :param str instance_id: instance? version? TODO
        :param int timeout: wait timeout. default 60s
        :param str state: desired state
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'machine_id', 'instance_id', 'timeout', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_wait" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `machines_wait`")  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if self.api_client.client_side_validation and ('machine_id' not in params or
                                                       params['machine_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `machine_id` when calling `machines_wait`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'machine_id' in params:
            path_params['machine_id'] = params['machine_id']  # noqa: E501

        query_params = []
        if 'instance_id' in params:
            query_params.append(('instance_id', params['instance_id']))  # noqa: E501
        if 'timeout' in params:
            query_params.append(('timeout', params['timeout']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/wait', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
