# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flyio.api_client import ApiClient


class VolumesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_volume_snapshot(self, app_name, volume_id, **kwargs):  # noqa: E501
        """create_volume_snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_volume_snapshot(app_name, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_volume_snapshot_with_http_info(app_name, volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_volume_snapshot_with_http_info(app_name, volume_id, **kwargs)  # noqa: E501
            return data

    def create_volume_snapshot_with_http_info(self, app_name, volume_id, **kwargs):  # noqa: E501
        """create_volume_snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_volume_snapshot_with_http_info(app_name, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'volume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_volume_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `create_volume_snapshot`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if self.api_client.client_side_validation and ('volume_id' not in params or
                                                       params['volume_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `volume_id` when calling `create_volume_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'volume_id' in params:
            path_params['volume_id'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/volumes/{volume_id}/snapshots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_delete(self, app_name, volume_id, **kwargs):  # noqa: E501
        """volume_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_delete(app_name, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_delete_with_http_info(app_name, volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_delete_with_http_info(app_name, volume_id, **kwargs)  # noqa: E501
            return data

    def volume_delete_with_http_info(self, app_name, volume_id, **kwargs):  # noqa: E501
        """volume_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_delete_with_http_info(app_name, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'volume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `volume_delete`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if self.api_client.client_side_validation and ('volume_id' not in params or
                                                       params['volume_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `volume_id` when calling `volume_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'volume_id' in params:
            path_params['volume_id'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/volumes/{volume_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Volume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumes_create(self, app_name, request, **kwargs):  # noqa: E501
        """volumes_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_create(app_name, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param CreateVolumeRequest request: Request body (required)
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volumes_create_with_http_info(app_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.volumes_create_with_http_info(app_name, request, **kwargs)  # noqa: E501
            return data

    def volumes_create_with_http_info(self, app_name, request, **kwargs):  # noqa: E501
        """volumes_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_create_with_http_info(app_name, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param CreateVolumeRequest request: Request body (required)
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumes_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `volumes_create`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `volumes_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/volumes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Volume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumes_extend(self, app_name, volume_id, request, **kwargs):  # noqa: E501
        """volumes_extend  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_extend(app_name, volume_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :param ExtendVolumeRequest request: Request body (required)
        :return: ExtendVolumeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volumes_extend_with_http_info(app_name, volume_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.volumes_extend_with_http_info(app_name, volume_id, request, **kwargs)  # noqa: E501
            return data

    def volumes_extend_with_http_info(self, app_name, volume_id, request, **kwargs):  # noqa: E501
        """volumes_extend  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_extend_with_http_info(app_name, volume_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :param ExtendVolumeRequest request: Request body (required)
        :return: ExtendVolumeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'volume_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumes_extend" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `volumes_extend`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if self.api_client.client_side_validation and ('volume_id' not in params or
                                                       params['volume_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `volume_id` when calling `volumes_extend`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `volumes_extend`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'volume_id' in params:
            path_params['volume_id'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/volumes/{volume_id}/extend', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendVolumeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumes_get_by_id(self, app_name, volume_id, **kwargs):  # noqa: E501
        """volumes_get_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_get_by_id(app_name, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volumes_get_by_id_with_http_info(app_name, volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.volumes_get_by_id_with_http_info(app_name, volume_id, **kwargs)  # noqa: E501
            return data

    def volumes_get_by_id_with_http_info(self, app_name, volume_id, **kwargs):  # noqa: E501
        """volumes_get_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_get_by_id_with_http_info(app_name, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'volume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumes_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `volumes_get_by_id`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if self.api_client.client_side_validation and ('volume_id' not in params or
                                                       params['volume_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `volume_id` when calling `volumes_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'volume_id' in params:
            path_params['volume_id'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/volumes/{volume_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Volume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumes_list(self, app_name, **kwargs):  # noqa: E501
        """volumes_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_list(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :return: list[Volume]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volumes_list_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.volumes_list_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def volumes_list_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """volumes_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_list_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :return: list[Volume]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumes_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `volumes_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Volume]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumes_list_snapshots(self, app_name, volume_id, **kwargs):  # noqa: E501
        """volumes_list_snapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_list_snapshots(app_name, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :return: list[VolumeSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volumes_list_snapshots_with_http_info(app_name, volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.volumes_list_snapshots_with_http_info(app_name, volume_id, **kwargs)  # noqa: E501
            return data

    def volumes_list_snapshots_with_http_info(self, app_name, volume_id, **kwargs):  # noqa: E501
        """volumes_list_snapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_list_snapshots_with_http_info(app_name, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :return: list[VolumeSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'volume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumes_list_snapshots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `volumes_list_snapshots`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if self.api_client.client_side_validation and ('volume_id' not in params or
                                                       params['volume_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `volume_id` when calling `volumes_list_snapshots`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'volume_id' in params:
            path_params['volume_id'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/volumes/{volume_id}/snapshots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VolumeSnapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumes_update(self, app_name, volume_id, request, **kwargs):  # noqa: E501
        """volumes_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_update(app_name, volume_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :param UpdateVolumeRequest request: Request body (required)
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volumes_update_with_http_info(app_name, volume_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.volumes_update_with_http_info(app_name, volume_id, request, **kwargs)  # noqa: E501
            return data

    def volumes_update_with_http_info(self, app_name, volume_id, request, **kwargs):  # noqa: E501
        """volumes_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_update_with_http_info(app_name, volume_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: Fly App Name (required)
        :param str volume_id: Volume ID (required)
        :param UpdateVolumeRequest request: Request body (required)
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'volume_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumes_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if self.api_client.client_side_validation and ('app_name' not in params or
                                                       params['app_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_name` when calling `volumes_update`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if self.api_client.client_side_validation and ('volume_id' not in params or
                                                       params['volume_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `volume_id` when calling `volumes_update`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `volumes_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'volume_id' in params:
            path_params['volume_id'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app_name}/volumes/{volume_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Volume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
